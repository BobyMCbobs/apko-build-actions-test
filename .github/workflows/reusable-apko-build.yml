name: reusable apko build
on:
  workflow_call:
    inputs:
      melangeConfigs:
        required: false
        type: string
        description: |
          a comma separated list of Melange configs.
      imageName:
        required: true
        type: string
        description: |
          the short name for image builds.
          e.g: nginx
      configPath:
        required: true
        type: string
        description: |
          the relative path to an APKO config.
          e.g: ./images/nginx/image.yaml
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - uses: chainguard-dev/actions/setup-melange@3c8440de395c1ae0d6a15161a71d54adb235e6cb # main
        if: ${{ inputs.melangeConfigs != '' }}
      - uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
      - uses: sigstore/cosign-installer@dd6b2e2b610a11fd73dd187a43d57cc1394e35f9 # v3.0.5
      - uses: mikefarah/yq@5ef537f3fd1a9437aa3ee44c32c6459a126efdc4 # v4.34.1
      - uses: imjasonh/setup-crane@00c9e93efa4e1138c9a7a5c594acd6c75a2fbf0c # v0.3
      - name: quay crane login
        env:
          quay-robot-token: ${{ secrets.QUAY_ROBOT_TOKEN }}
          quay-username: ${{ secrets.QUAY_USERNAME }}
        if: ${{ env.quay-robot-token != null && env.quay-username != null }}
        run: |
          echo "${{ env.quay-robot-token }}" | crane auth login --password-stdin quay.io ${{ env.quay-username }}
      - name: Generate snapshot date
        id: snapshot-date
        run: |
          echo name=date::$(date -u +%Y%m%d) >> $GITHUB_OUTPUT
          echo name=epoch::$(date -u +%s) >> $GITHUB_OUTPUT
      - id: run-info
        name: collect job run info
        env:
          DOCKER_REPO: ghcr.io/${{ github.repository }}
          IMAGE_NAME: ${{ inputs.imageName }}
        run: |
          if [ -n "${{ inputs.registryOverride }}" ]; then
            DOCKER_REPO="${{ inputs.registryOverride }}"
          fi
          echo "docker-repo=${DOCKER_REPO,,}/$IMAGE_NAME" >> $GITHUB_OUTPUT
          ARCHES="$(yq e '.archs | join(",")' ${{ inputs.configPath }})"
          if [ -n "$ARCHES" ]; then
            echo "arches=$ARCHES" >> $GITHUB_OUTPUT
          else
            echo "arches=x86_64" >> $GITHUB_OUTPUT
          fi
        shell: bash
      - uses: chainguard-dev/actions/melange-keygen@3c8440de395c1ae0d6a15161a71d54adb235e6cb # main
        if: ${{ inputs.melangeConfigs != '' }}
        with:
          signing-key-path: /etc/apk/keys/melange.rsa
      - uses: chainguard-dev/actions/melange-build-pkg@3c8440de395c1ae0d6a15161a71d54adb235e6cb # main
        if: ${{ inputs.melangeConfigs != null }}
        with:
          config: ''
          multi-config: ${{ inputs.melangeConfigs }}
          sign-with-key: true
          signing-key-path: /etc/apk/keys/melange.rsa
          empty-workspace: true
          archs: ${{ steps.run-info.outputs.arches }}
      - uses: chainguard-images/actions/apko-publish@bb159715325d773d5460ed45e96c5e577f79a991 # main
        if: ${{ inputs.melangeConfigs == '' }}
        id: build-without-signing-key
        name: build-without-signing-key
        with:
          tag: ${{ steps.run-info.outputs.docker-repo }}
          config: ${{ inputs.configPath }}
          source-date-epoch: ${{ steps.snapshot-date.outputs.epoch }}
      - uses: chainguard-images/actions/apko-publish@bb159715325d773d5460ed45e96c5e577f79a991 # main
        if: ${{ inputs.melangeConfigs != '' }}
        id: build-with-signing-key
        name: build-with-signing-key
        with:
          tag: ${{ steps.run-info.outputs.docker-repo }}
          config: ${{ inputs.configPath }}
          source-date-epoch: ${{ steps.snapshot-date.outputs.epoch }}
          keyring-append: /etc/apk/keys/melange.rsa.pub
      - id: get-image
        run: |
          if [ -z "${{ inputs.melangeConfigs }}" ]; then
            echo "image=${{ steps.build-without-signing-key.outputs.digest }}" >> $GITHUB_OUTPUT
          else
            echo "image=${{ steps.build-with-signing-key.outputs.digest }}" >> $GITHUB_OUTPUT
          fi
      - id: sign-images-and-attest-sbom
        env:
          COSIGN_YES: "true"
          IMAGE: ${{ steps.get-image.outputs.image }}
        run: |
          cosign sign $IMAGE -y --recursive
          cosign download sbom $IMAGE > /tmp/sbom-spdx.json
          cosign attest --predicate /tmp/sbom-spdx.json $IMAGE -y --recursive
      - name: image result
        id: result
        run: |
          echo "Build, pushed and signed: $(echo ${{ steps.build.outputs.images }} | tr ',' ' ')"
